import { {{resource.singular.pascalCase}}Dto } from "../dtos/{{resource.singular.lowerCase}}.dto";
import { {{resource.singular.pascalCase}} } from "../entities/{{resource.singular.lowerCase}}.entity";
import { DBService } from "../services/db";

export class {{resource.singular.pascalCase}}Repo {
  static db = DBService.connect();

  static async create({{resource.singular.camelCase}}: {{resource.singular.pascalCase}}Dto): Promise<{{resource.singular.pascalCase}}> {
    try {
      return await this.db.{{resource.singular.camelCase}}.create({ data: {{resource.singular.camelCase}} });
    } catch (error: any) {
      throw error;
    }
  }

  static async findAll(): Promise<{{resource.singular.pascalCase}}[]> {
    try {
      return await this.db.{{resource.singular.camelCase}}.findMany();
    } catch (error: any) {
      throw error;
    }
  }

  static async findOne({{resource.singular.camelCase}}Id: {{resource.singular.pascalCase}}["id"]): Promise<{{resource.singular.pascalCase}}> {
    try {
      return await this.db.{{resource.singular.camelCase}}.findUnique({ where: { id: {{resource.singular.camelCase}}Id } });
    } catch (error: any) {
      throw error;
    }
  }

  static async update({{resource.singular.camelCase}}Id: {{resource.singular.pascalCase}}["id"], {{resource.singular.camelCase}}: {{resource.singular.pascalCase}}Dto): Promise<{{resource.singular.pascalCase}}> {
    try {
      return await this.db.{{resource.singular.camelCase}}.update({ data: {{resource.singular.camelCase}}, where: { id: {{resource.singular.camelCase}}Id } });
    } catch (error: any) {
      throw error;
    }
  }

  static async delete({{resource.singular.camelCase}}Id: {{resource.singular.pascalCase}}["id"]): Promise<{{resource.singular.pascalCase}}> {
    try {
      return await this.db.{{resource.singular.camelCase}}.delete({ where: { id: {{resource.singular.camelCase}}Id } });
    } catch (error: any) {
      throw error;
    }
  }
}
