import { IsNotEmpty, IsNumber, IsString } from "class-validator";
import { {{resource.singular.pascalCase}} } from "../entities/{{resource.singular.lowerCase}}.entity";

export class {{resource.singular.pascalCase}}Dto {
  @IsNumber({}, { message: "Invalid ID", groups: [] })
  id?: number;

  @IsString()
  @IsNotEmpty({ message: "Name is required", groups: ["create", "update"] })
  name: string;

  public static fromJson(data: { [key: string]: any }): {{resource.singular.pascalCase}}Dto {
    const {{resource.singular.camelCase}}: {{resource.singular.pascalCase}}Dto = new {{resource.singular.pascalCase}}Dto();

    if (data?.id) {{resource.singular.camelCase}}.id = data.id;
    if (data?.name) {{resource.singular.camelCase}}.name = data.name;

    return {{resource.singular.camelCase}};
  }

  public static toJson({{resource.singular.camelCase}}: {{resource.singular.pascalCase}}): object {
    if (!{{resource.singular.camelCase}}) {
      return;
    }

    return {
      id: {{resource.singular.camelCase}}.id,
      name: {{resource.singular.camelCase}}.name,
    };
  }

  public static toArray({{resource.plural.camelCase}}: {{resource.singular.pascalCase}}[]): object[] {
    return {{resource.plural.camelCase}}.map(({{resource.singular.camelCase}}) => this.toJson({{resource.singular.camelCase}}));
  }
}
