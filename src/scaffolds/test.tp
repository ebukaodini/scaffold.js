import { faker } from "@faker-js/faker";
import { beforeEach, describe, expect, test } from "@jest/globals";
import { createDbMock, MockContext } from "../config";
import { {{resource.singular.pascalCase}}Repo } from "../../repos/{{resource.singular.lowerCase}}.repo";

let mockDb: MockContext["prisma"];

beforeEach(() => {
  mockDb = createDbMock().prisma;
});

const random{{resource.singular.pascalCase}} = () => {
  return {
    id: faker.number.int(),
    name: faker.word.words(1),
  };
};

describe("{{resource.singular.pascalCase}} Repo", () => {
  test("should create new {{resource.singular.lowerCase.spaceCase}}", async () => {
    const {{resource.singular.camelCase}} = random{{resource.singular.pascalCase}}();
    mockDb.{{resource.singular.camelCase}}.create.mockResolvedValue({{resource.singular.camelCase}});

    {{resource.singular.pascalCase}}Repo.db = mockDb;
    await expect({{resource.singular.pascalCase}}Repo.create({{resource.singular.camelCase}})).resolves.toEqual({{resource.singular.camelCase}});
  });

  test("should get all {{resource.plural.lowerCase.spaceCase}}", async () => {
    const {{resource.plural.camelCase}} = faker.helpers.multiple(random{{resource.singular.pascalCase}}, {
      count: 5,
    });
    mockDb.{{resource.singular.camelCase}}.findMany.mockResolvedValue({{resource.plural.camelCase}});

    {{resource.singular.pascalCase}}Repo.db = mockDb;
    await expect({{resource.singular.pascalCase}}Repo.findAll()).resolves.toEqual({{resource.plural.camelCase}});
  });

  test("should get one {{resource.singular.lowerCase.spaceCase}}", async () => {
    const {{resource.singular.camelCase}} = random{{resource.singular.pascalCase}}();
    mockDb.{{resource.singular.camelCase}}.findUnique.mockResolvedValue({{resource.singular.camelCase}});

    {{resource.singular.pascalCase}}Repo.db = mockDb;
    await expect({{resource.singular.pascalCase}}Repo.findOne({{resource.singular.camelCase}}.id)).resolves.toEqual({{resource.singular.camelCase}});
  });

  test("should update one {{resource.singular.lowerCase.spaceCase}}", async () => {
    const {{resource.singular.camelCase}} = random{{resource.singular.pascalCase}}();
    mockDb.{{resource.singular.camelCase}}.update.mockResolvedValue({{resource.singular.camelCase}});

    {{resource.singular.pascalCase}}Repo.db = mockDb;
    await expect({{resource.singular.pascalCase}}Repo.update({{resource.singular.camelCase}}.id, {{resource.singular.camelCase}})).resolves.toEqual({{resource.singular.camelCase}});
  });

  test("should delete one {{resource.singular.lowerCase.spaceCase}}", async () => {
    const {{resource.singular.camelCase}} = random{{resource.singular.pascalCase}}();
    mockDb.{{resource.singular.camelCase}}.delete.mockResolvedValue({{resource.singular.camelCase}});

    {{resource.singular.pascalCase}}Repo.db = mockDb;
    await expect({{resource.singular.pascalCase}}Repo.delete({{resource.singular.camelCase}}.id)).resolves.toEqual({{resource.singular.camelCase}});
  });
});
