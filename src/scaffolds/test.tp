import { faker } from "@faker-js/faker";
import { beforeEach, describe, expect, test } from "@jest/globals";
import { createDbMock, MockContext } from "../config";
import { {{resource_sentence_case}}Repo } from "../../repos/{{resource_file_name}}.repo";

let mockDb: MockContext["prisma"];

beforeEach(() => {
  mockDb = createDbMock().prisma;
});

const random{{resource_sentence_case}} = () => {
  return {
    id: faker.number.int(),
    name: faker.word.words(1),
  };
};

describe("{{resource_sentence_case}} Repo", () => {
  test("should create new {{resource_lower_case}}", async () => {
    const {{resource_lower_case}} = random{{resource_sentence_case}}();
    mockDb.{{resource_lower_case_plural}}.create.mockResolvedValue({{resource_lower_case}});

    {{resource_sentence_case}}Repo.db = mockDb;
    await expect({{resource_sentence_case}}Repo.create({{resource_lower_case}})).resolves.toEqual({{resource_lower_case}});
  });

  test("should get all {{resource_lower_case_plural}}", async () => {
    const {{resource_lower_case_plural}} = faker.helpers.multiple(random{{resource_sentence_case}}, {
      count: 5,
    });
    mockDb.{{resource_lower_case_plural}}.findMany.mockResolvedValue({{resource_lower_case_plural}});

    {{resource_sentence_case}}Repo.db = mockDb;
    await expect({{resource_sentence_case}}Repo.findAll()).resolves.toEqual({{resource_lower_case_plural}});
  });

  test("should get one {{resource_lower_case}}", async () => {
    const {{resource_lower_case}} = random{{resource_sentence_case}}();
    mockDb.{{resource_lower_case_plural}}.findUnique.mockResolvedValue({{resource_lower_case}});

    {{resource_sentence_case}}Repo.db = mockDb;
    await expect({{resource_sentence_case}}Repo.findOne({{resource_lower_case}}.id)).resolves.toEqual({{resource_lower_case}});
  });

  test("should update one {{resource_lower_case}}", async () => {
    const {{resource_lower_case}} = random{{resource_sentence_case}}();
    mockDb.{{resource_lower_case_plural}}.update.mockResolvedValue({{resource_lower_case}});

    {{resource_sentence_case}}Repo.db = mockDb;
    await expect({{resource_sentence_case}}Repo.update({{resource_lower_case}}.id, {{resource_lower_case}})).resolves.toEqual({{resource_lower_case}});
  });

  test("should delete one {{resource_lower_case}}", async () => {
    const {{resource_lower_case}} = random{{resource_sentence_case}}();
    mockDb.{{resource_lower_case_plural}}.delete.mockResolvedValue({{resource_lower_case}});

    {{resource_sentence_case}}Repo.db = mockDb;
    await expect({{resource_sentence_case}}Repo.delete({{resource_lower_case}}.id)).resolves.toEqual({{resource_lower_case}});
  });
});
