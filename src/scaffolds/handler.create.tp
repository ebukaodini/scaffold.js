import "reflect-metadata";
import {
  APIGatewayProxyEvent,
  APIGatewayProxyResult,
  Context,
} from "aws-lambda";
import { response, validator } from "../../middlewares";
import { {{resource_sentence_case}}Dto } from "../../dtos/{{resource_file_name}}.dto";
import { {{resource_sentence_case}}Repo } from "../../repos/{{resource_file_name}}.repo";
import { Middleware } from "../../services/middleware";

export const handler = Middleware.use(
  [validator({{resource_sentence_case}}Dto, "create")],
  async (
    event: APIGatewayProxyEvent,
    _context: Context
  ): Promise<APIGatewayProxyResult> => {
    try {
      const data = {{resource_sentence_case}}Dto.fromJson(JSON.parse(event.body!));
      const {{resource_lower_case}} = await {{resource_sentence_case}}Repo.create(data);
      return response.success("{{resource_sentence_case}} created.", {{resource_sentence_case}}Dto.toJson({{resource_lower_case}}));
    } catch (error: any) {
      return response.error("{{resource_sentence_case}} not created!", error.message);
    }
  }
);
