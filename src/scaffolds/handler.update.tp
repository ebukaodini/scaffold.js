import "reflect-metadata";
import {
  APIGatewayProxyEvent,
  APIGatewayProxyResult,
  Context,
} from "aws-lambda";
import { response, validator } from "../../middlewares";
import { {{resource.singular.pascalCase}}Dto } from "../../dtos/{{resource.singular.lowerCase}}.dto";
import { {{resource.singular.pascalCase}}Repo } from "../../repos/{{resource.singular.lowerCase}}.repo";
import { Middleware } from "../../services/middleware";

export const handler = Middleware.use(
  [validator({{resource.singular.pascalCase}}Dto, "update")],
  async (
    event: APIGatewayProxyEvent,
    _context: Context
  ): Promise<APIGatewayProxyResult> => {
    try {
      const data = {{resource.singular.pascalCase}}Dto.fromJson(JSON.parse(event.body!));
      const {{resource.singular.camelCase}} = await {{resource.singular.pascalCase}}Repo.update(event.pathParameters.{{resource.singular.camelCase}}Id, data);
      return response.success("{{resource.singular.sentenceCase.spaceCase}} updated.", {{resource.singular.pascalCase}}Dto.toJson({{resource.singular.camelCase}}));
    } catch (error: any) {
      return response.error("{{resource.singular.sentenceCase.spaceCase}} not updated!", error.message);
    }
  }
);
