import { Request, Response } from "express";
import { {{resource.singular.pascalCase}}Repo } from "../repos/{{resource.singular.lowerCase}}.repo";
import { {{resource.singular.pascalCase}}Dto } from "../dtos/{{resource.singular.lowerCase}}.dto";
import IResponse from "../interfaces/IResponse";

export class {{resource.singular.pascalCase}}Controller {
  static async create{{resource.singular.pascalCase}}(req: Request, res: Response): Promise<IResponse> {
    try {
      const data = {{resource.singular.pascalCase}}Dto.fromJson(req.body);
      const {{resource.singular.camelCase}} = await {{resource.singular.pascalCase}}Repo.create(data);
      return res.success("{{resource.singular.sentenceCase.spaceCase}} created.", {{resource.singular.pascalCase}}Dto.toJson({{resource.singular.camelCase}}));
    } catch (error: any) {
      return res.error("{{resource.singular.sentenceCase.spaceCase}} not created!", error.message);
    }
  }

  static async findAll{{resource.plural.pascalCase}}(req: Request, res: Response): Promise<IResponse> {
    try {
      const {{resource.plural.camelCase}} = await {{resource.singular.pascalCase}}Repo.findAll();
      return res.success("All {{resource.plural.lowerCase.spaceCase}}.", {{resource.singular.pascalCase}}Dto.toArray({{resource.plural.camelCase}}));
    } catch (error: any) {
      return res.error("{{resource.plural.sentenceCase.spaceCase}} not found!", error.message);
    }
  }

  static async findOne{{resource.singular.pascalCase}}(req: Request, res: Response): Promise<IResponse> {
    try {
      const {{resource.singular.camelCase}} = await {{resource.singular.pascalCase}}Repo.findOne(Number(req.params.{{resource.singular.camelCase}}Id));
      return res.success("{{resource.singular.sentenceCase.spaceCase}} details.", {{resource.singular.pascalCase}}Dto.toJson({{resource.singular.camelCase}}));
    } catch (error: any) {
      return res.error("{{resource.singular.sentenceCase.spaceCase}} not found!", error.message);
    }
  }

  static async update{{resource.singular.pascalCase}}(req: Request, res: Response): Promise<IResponse> {
    try {
      const data = {{resource.singular.pascalCase}}Dto.fromJson(req.body);
      const {{resource.singular.camelCase}} = await {{resource.singular.pascalCase}}Repo.update(Number(req.params.{{resource.singular.camelCase}}Id), data);
      return res.success("{{resource.singular.sentenceCase.spaceCase}} updated.", {{resource.singular.pascalCase}}Dto.toJson({{resource.singular.camelCase}}));
    } catch (error: any) {
      return res.error("{{resource.singular.sentenceCase.spaceCase}} not updated!", error.message);
    }
  }

  static async delete{{resource.singular.pascalCase}}(req: Request, res: Response): Promise<IResponse> {
    try {
      const {{resource.singular.camelCase}} = await {{resource.singular.pascalCase}}Repo.delete(Number(req.params.{{resource.singular.camelCase}}Id));
      return res.success("{{resource.singular.sentenceCase.spaceCase}} deleted.", {{resource.singular.pascalCase}}Dto.toJson({{resource.singular.camelCase}}));
    } catch (error: any) {
      return res.error("{{resource.singular.sentenceCase.spaceCase}} not deleted!", error.message);
    }
  }
}
